{"ts":1373138488015,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1373138489785,"patch":[[{"diffs":[[1,"// //\"/cgi-bin/projects/wordnet/query.pl?word=\"\n\n\nvar express = require(\"express\");\nvar app = express();\nvar server = require('http').createServer(app);\nvar io = require('socket.io').listen(server);\nvar format = require('./static/date.format.js');\n\napp.configure(function(){\n  app.use('/static', express.static(__dirname + '/static'));\n  app.use(express.static(__dirname + '/static'));\n});\napp.set('view options', { layout: false });\n\n//specify ejs as our template engine.\napp.set('view engine', 'ejs');\n\n// special handling of the root folder\napp.get(\"/\", function(req, res){\n    res.render('game', { locals: {\n            hostName: \"http://gohometreeyouredrunk.john-holland.c9.io/\"//req.protocol + \"://\" + req.get('host') + req.url\n        }});\n    console.log(\"rendered\");\n});\n\nio.set('log level', 1);\n\n// startup this server\nserver.listen(process.env.PORT || 3000);\nconsole.log(\"ready\");\n\n//client name to object map.\nvar clients = { };\nvar clientUpdateList = [];\n\nvar lastAvailableClientName = 0;\n\nvar logWithDate = function(logString) {\n    console.log(\"[\" + format.dateFormat() + \"] \" + logString);\n}\n\nio.sockets.on(\"connection\", function(socket) {\n    socket.on('register', function(data) {\n        lastAvailableClientName = lastAvailableClientName + 1;\n        var possibleClient = JSON.parse(data);\n        var client = { };\n        \n        if (possibleClient != null) {\n            client.data = possibleClient;\n            client.data.name = \"a\" + lastAvailableClientName.toString();\n        } else {\n            client.data = { name: \"a\" + lastAvailableClientName.toString() };    \n        }\n        \n        client.socket = socket;\n        clients[client.data.name] = client;        \n        clientUpdateList.push(client);\n        \n        socket.emit(\"registered\", client.data.name);\n        socket.emit(\"new_client\", JSON.stringify({ newClients: clientUpdateList.filter(function(otherClient) { return otherClient.data.name != client.data.name; })\n                                                                               .map(function(otherClient) { return otherClient.data; }) }));\n        \n        socket.broadcast.emit(\"new_client\", JSON.stringify({ newClients: [client.data] }));\n        \n        logWithDate(\"Client Connected: \" + client.data.name);\n        \n        socket.set(\"clientName\", client.data.name, function() {\n            socket.on(\"update\", function(data) {\n                data = JSON.parse(data);\n                socket.get(\"clientName\", function(err, clientName) {\n                    //console.log(new Date().toISOString());\n                    if (typeof data.name === 'undefined') {\n                        socket.emit(\"server_error\", { message: \"Always send clientName!\"});\n                    }\n                    \n                    if (!(data.name in clients)) {\n                        socket.emit(\"server_error\", { message: \"Could not find client with name, \" + data.name + \" in clients map!\"});\n                    }\n                    \n                    //update the data for this client\n                    clients[clientName].data = data;\n                    \n                    socket.emit(\"updated\", JSON.stringify({ entityUpdates: clientUpdateList.map(function(otherClient) { return otherClient.data; }) })); \n                });\n            });\n            \n            //forward the click callback.\n            socket.on(\"click\", function(data) {\n                if (data == null) {\n                    logWithDate(\"Receieved null data in \\\"click\\\" callback\");\n                    return;\n                }\n                \n                if (data in clients) {\n                    clients[data].socket.emit(\"clicked\");\n                } else {\n                    logWithDate(\"Can't find name in clients list: \" + data);\n                }\n            });\n            \n            socket.on(\"disconnect\", function() {\n                socket.get(\"clientName\", function(err, clientName) {\n                    if (!(clientName in clients)) {\n                        logWithDate(\"Can't find name in clients list: \" + clientName);\n                        return;\n                    }\n                    clientUpdateList.splice(clientUpdateList.indexOf(clients[clientName]), 1);\n                    socket.broadcast.emit(\"player_dropped\", clientName);\n                    delete clients[clientName];\n                    logWithDate(\"Client Disconnected: \" + clientName);\n                });\n            });\n            \n            socket.on(\"chat\", function(data) {\n               socket.broadcast.emit(\"chatted\", data);\n               socket.emit(\"chatted\", data);\n            });\n        });\n    });\n});"]],"start1":0,"start2":0,"length1":0,"length2":4671}]],"length":4671,"saved":false}
{"ts":1373142042624,"patch":[[{"diffs":[[0,"?word=\"\n"],[1,"//duurr "],[0,"\n\nvar ex"]],"start1":40,"start2":40,"length1":16,"length2":24}]],"length":4679,"saved":false}
{"ts":1373142046493,"patch":[[{"diffs":[[0,"//duurr "],[1,"remember to install require"],[0,"\n\nvar ex"]],"start1":48,"start2":48,"length1":16,"length2":43}]],"length":4706,"saved":false}
{"ts":1373142050072,"patch":[[{"diffs":[[0," require"],[1,"d modules for a "],[0,"\n\nvar ex"]],"start1":75,"start2":75,"length1":16,"length2":32}]],"length":4722,"saved":false}
{"ts":1373142053427,"patch":[[{"diffs":[[0,"es for a"],[-1," "],[0,"\n\nvar ex"]],"start1":90,"start2":90,"length1":17,"length2":16}]],"length":4721,"saved":false}
{"ts":1373142056056,"patch":[[{"diffs":[[0,"es for a"],[1," node project..."],[0,"\n\nvar ex"]],"start1":90,"start2":90,"length1":16,"length2":32}]],"length":4737,"saved":false}
{"ts":1373142058060,"patch":[[{"diffs":[[0,"rd=\""],[-1,"\n//duurr remember to install required modules for a node project..."],[0,"\n\nva"]],"start1":43,"start2":43,"length1":75,"length2":8}]],"length":4670,"saved":false}
{"ts":1373143344277,"patch":[[{"diffs":[[0,"    "],[-1,"//console.log(new Date().toISOString());"],[0,"\n   "]],"start1":2524,"start2":2524,"length1":48,"length2":8}]],"length":4630,"saved":false}
{"ts":1373143375415,"patch":[[{"diffs":[[0,"ng);\n}\n\n"],[1,"//on\n"],[0,"io.socke"]],"start1":1100,"start2":1100,"length1":16,"length2":21}]],"length":4635,"saved":false}
{"ts":1373143381204,"patch":[[{"diffs":[[0,"\n}\n\n//on"],[1,"ce clients are registered, they setup "],[0,"\nio.sock"]],"start1":1104,"start2":1104,"length1":16,"length2":54}]],"length":4673,"saved":false}
{"ts":1373143386593,"patch":[[{"diffs":[[0,"y setup "],[1,"a "],[0,"\nio.sock"]],"start1":1142,"start2":1142,"length1":16,"length2":18}]],"length":4675,"saved":false}
{"ts":1373143392478,"patch":[[{"diffs":[[0," setup a"],[1,"n update loop"],[0," \nio.soc"]],"start1":1143,"start2":1143,"length1":16,"length2":29}]],"length":4688,"saved":false}
{"ts":1373143400253,"patch":[[{"diffs":[[0,"ate loop"],[-1," "],[0,"\nio.sock"]],"start1":1156,"start2":1156,"length1":17,"length2":16}]],"length":4687,"saved":false}
{"ts":1373143404168,"patch":[[{"diffs":[[0,"up a"],[-1,"n update loop"],[1," "],[0,"\nio."]],"start1":1147,"start2":1147,"length1":21,"length2":9}]],"length":4675,"saved":false}
{"ts":1373143411417,"patch":[[{"diffs":[[0,"setup a "],[1,"data replicatio"],[0,"\nio.sock"]],"start1":1144,"start2":1144,"length1":16,"length2":31}]],"length":4690,"saved":false}
{"ts":1373143412836,"patch":[[{"diffs":[[0,"plicatio"],[1,"n loop"],[0,"\nio.sock"]],"start1":1159,"start2":1159,"length1":16,"length2":22}]],"length":4696,"saved":false}
{"ts":1373143415014,"patch":[[{"diffs":[[0,"on loop\n"],[1,"//\n"],[0,"io.socke"]],"start1":1166,"start2":1166,"length1":16,"length2":19}]],"length":4699,"saved":false}
{"ts":1373143420843,"patch":[[{"diffs":[[0," loop\n//"],[1,"other than that, they respond to n"],[0,"\nio.sock"]],"start1":1168,"start2":1168,"length1":16,"length2":50}]],"length":4733,"saved":false}
{"ts":1373143422555,"patch":[[{"diffs":[[0,"ond to n"],[1,"ew_client "],[0,"\nio.sock"]],"start1":1202,"start2":1202,"length1":16,"length2":26}]],"length":4743,"saved":false}
{"ts":1373143429770,"patch":[[{"diffs":[[0,"   \n"],[-1,"            //forward the click callback.\n            socket.on(\"click\", function(data) {\n                if (data == null) {\n                    logWithDate(\"Receieved null data in \\\"click\\\" callback\");\n                    return;\n                }\n                \n                if (data in clients) {\n                    clients[data].socket.emit(\"clicked\");\n                } else {\n                    logWithDate(\"Can't find name in clients list: \" + data);\n                }\n            });\n            \n"],[0,"    "]],"start1":3393,"start2":3393,"length1":521,"length2":8}]],"length":4230,"saved":false}
{"ts":1373143453569,"patch":[[{"diffs":[[0,"w_client"],[1,","],[0," \nio.soc"]],"start1":1211,"start2":1211,"length1":16,"length2":17}]],"length":4231,"saved":false}
{"ts":1373143454471,"patch":[[{"diffs":[[0,"client, "],[1,"player_dropped"],[0,"\nio.sock"]],"start1":1213,"start2":1213,"length1":16,"length2":30}]],"length":4245,"saved":false}
{"ts":1373143455387,"patch":[[{"diffs":[[0,"_dropped"],[1,", "],[0,"\nio.sock"]],"start1":1227,"start2":1227,"length1":16,"length2":18}]],"length":4247,"saved":false}
{"ts":1373143458875,"patch":[[{"diffs":[[0,"ropped, "],[1,"chatted"],[0,"\nio.sock"]],"start1":1229,"start2":1229,"length1":16,"length2":23}]],"length":4254,"saved":false}
{"ts":1373143921257,"patch":[[{"diffs":[[0,"p://"],[-1,"gohometreeyouredrunk"],[1,"molyj"],[0,".joh"]],"start1":637,"start2":637,"length1":28,"length2":13}]],"length":4239,"saved":false}
{"ts":1373143923040,"patch":[[{"diffs":[[0,"://molyj"],[1,"am2013"],[0,".john-ho"]],"start1":638,"start2":638,"length1":16,"length2":22}]],"length":4245,"saved":false}
