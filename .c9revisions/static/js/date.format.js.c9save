{"ts":1373142912764,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1373142914003,"patch":[[{"diffs":[[1,"/*\r\n * Date Format 1.2.3\r\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\r\n * MIT license\r\n *\r\n * Includes enhancements by Scott Trenda <scott.trenda.net>\r\n * and Kris Kowal <cixar.com/~kris.kowal/>\r\n *\r\n * Accepts a date, a mask, or a date and a mask.\r\n * Returns a formatted version of the given date.\r\n * The date defaults to the current date/time.\r\n * The mask defaults to dateFormat.masks.default.\r\n */\r\n\r\nvar dateFormat = function () {\r\n    var    token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\r\n\t\ttimezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\r\n\t\ttimezoneClip = /[^-+\\dA-Z]/g,\r\n\t\tpad = function (val, len) {\r\n\t\t\tval = String(val);\r\n\t\t\tlen = len || 2;\r\n\t\t\twhile (val.length < len) val = \"0\" + val;\r\n\t\t\treturn val;\r\n\t\t};\r\n\r\n\t// Regexes and supporting functions are cached through closure\r\n\treturn function (date, mask, utc) {\r\n\t\tvar dF = dateFormat;\r\n\r\n\t\t// You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\r\n\t\tif (arguments.length == 1 && Object.prototype.toString.call(date) == \"[object String]\" && !/\\d/.test(date)) {\r\n\t\t\tmask = date;\r\n\t\t\tdate = undefined;\r\n\t\t}\r\n\r\n\t\t// Passing date through Date applies Date.parse, if necessary\r\n\t\tdate = date ? new Date(date) : new Date;\r\n\t\tif (isNaN(date)) throw SyntaxError(\"invalid date\");\r\n\r\n\t\tmask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\r\n\r\n\t\t// Allow setting the utc argument via the mask\r\n\t\tif (mask.slice(0, 4) == \"UTC:\") {\r\n\t\t\tmask = mask.slice(4);\r\n\t\t\tutc = true;\r\n\t\t}\r\n\r\n\t\tvar\t_ = utc ? \"getUTC\" : \"get\",\r\n\t\t\td = date[_ + \"Date\"](),\r\n\t\t\tD = date[_ + \"Day\"](),\r\n\t\t\tm = date[_ + \"Month\"](),\r\n\t\t\ty = date[_ + \"FullYear\"](),\r\n\t\t\tH = date[_ + \"Hours\"](),\r\n\t\t\tM = date[_ + \"Minutes\"](),\r\n\t\t\ts = date[_ + \"Seconds\"](),\r\n\t\t\tL = date[_ + \"Milliseconds\"](),\r\n\t\t\to = utc ? 0 : date.getTimezoneOffset(),\r\n\t\t\tflags = {\r\n\t\t\t\td:    d,\r\n\t\t\t\tdd:   pad(d),\r\n\t\t\t\tddd:  dF.i18n.dayNames[D],\r\n\t\t\t\tdddd: dF.i18n.dayNames[D + 7],\r\n\t\t\t\tm:    m + 1,\r\n\t\t\t\tmm:   pad(m + 1),\r\n\t\t\t\tmmm:  dF.i18n.monthNames[m],\r\n\t\t\t\tmmmm: dF.i18n.monthNames[m + 12],\r\n\t\t\t\tyy:   String(y).slice(2),\r\n\t\t\t\tyyyy: y,\r\n\t\t\t\th:    H % 12 || 12,\r\n\t\t\t\thh:   pad(H % 12 || 12),\r\n\t\t\t\tH:    H,\r\n\t\t\t\tHH:   pad(H),\r\n\t\t\t\tM:    M,\r\n\t\t\t\tMM:   pad(M),\r\n\t\t\t\ts:    s,\r\n\t\t\t\tss:   pad(s),\r\n\t\t\t\tl:    pad(L, 3),\r\n\t\t\t\tL:    pad(L > 99 ? Math.round(L / 10) : L),\r\n\t\t\t\tt:    H < 12 ? \"a\"  : \"p\",\r\n\t\t\t\ttt:   H < 12 ? \"am\" : \"pm\",\r\n\t\t\t\tT:    H < 12 ? \"A\"  : \"P\",\r\n\t\t\t\tTT:   H < 12 ? \"AM\" : \"PM\",\r\n\t\t\t\tZ:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\r\n\t\t\t\to:    (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\r\n\t\t\t\tS:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\r\n\t\t\t};\r\n\r\n\t\treturn mask.replace(token, function ($0) {\r\n\t\t\treturn $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\r\n\t\t});\r\n\t};\r\n}();\r\n\r\n// Some common format strings\r\ndateFormat.masks = {\r\n\t\"default\":      \"ddd mmm dd yyyy HH:MM:ss\",\r\n\tshortDate:      \"m/d/yy\",\r\n\tmediumDate:     \"mmm d, yyyy\",\r\n\tlongDate:       \"mmmm d, yyyy\",\r\n\tfullDate:       \"dddd, mmmm d, yyyy\",\r\n\tshortTime:      \"h:MM TT\",\r\n\tmediumTime:     \"h:MM:ss TT\",\r\n\tlongTime:       \"h:MM:ss TT Z\",\r\n\tisoDate:        \"yyyy-mm-dd\",\r\n\tisoTime:        \"HH:MM:ss\",\r\n\tisoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",\r\n\tisoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\r\n};\r\n\r\n// Internationalization strings\r\ndateFormat.i18n = {\r\n\tdayNames: [\r\n\t\t\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\r\n\t\t\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n\t],\r\n\tmonthNames: [\r\n\t\t\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\r\n\t\t\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n\t]\r\n};\r\n\r\n// For convenience...\r\nDate.prototype.format = function (mask, utc) {\r\n\treturn dateFormat(this, mask, utc);\r\n};\r\n\r\nif (typeof module !== 'undefined') {\r\n    module.exports = {\r\n        dateFormat: dateFormat\r\n    };\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":4120}]],"length":4120,"saved":false}
